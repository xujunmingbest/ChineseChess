#pragma once
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <map>
using namespace std;

#define CHESSBOARDX 0
#define CHESSBOARDY 0

#define STARTX 50 
#define STARTY 20 
#define INTERVALY 84 //间隔84个像素
#define INTERVALX 86 //间隔86个像素
#define CHESSPIECEWIDTH  70 //每个棋子长度

//从（1，1） 到（9，10 ）
struct ChessCoordinatePosition {
	int x;
	int y;
public:
	bool operator<(const ChessCoordinatePosition & ct) const   // 两个const是必需的。 
	{
		if (x < ct.x) {
			return true;
		}
		else if (x == ct.x) {
			if (y < ct.y) {
				return true;
			}
		}
		return false;
	}
};

//对应（1，1） 到（9，10 ） 坐标的像素点坐标
struct ChessPixelLocation {
	int x;
	int y;
};

static map<ChessCoordinatePosition, ChessPixelLocation> ChessPosTable =
{
	{{-1,-1},{-100,-100}}, // 棋子消失的存储的位置
	{ {1,10},{ CHESSBOARDX+STARTX  ,CHESSBOARDY+STARTY  }},
	{ { 1,9 },{CHESSBOARDX+ STARTX ,CHESSBOARDY+STARTY + INTERVALY } },
	{ { 1,8 },{CHESSBOARDX+ STARTX ,CHESSBOARDY+STARTY + INTERVALY * 2 } },
	{ { 1,7 },{CHESSBOARDX+ STARTX ,CHESSBOARDY+STARTY + INTERVALY * 3 } },
	{ { 1,6 },{CHESSBOARDX+ STARTX ,CHESSBOARDY+STARTY + INTERVALY * 4 } },
	{ { 1,5 },{CHESSBOARDX+ STARTX ,CHESSBOARDY+STARTY + INTERVALY * 5 } },
	{ { 1,4 },{CHESSBOARDX+ STARTX ,CHESSBOARDY+STARTY + INTERVALY * 6 } },
	{ { 1,3 },{CHESSBOARDX+ STARTX ,CHESSBOARDY+STARTY + INTERVALY * 7 } },
	{ { 1,2 },{CHESSBOARDX+ STARTX ,CHESSBOARDY+STARTY + INTERVALY * 8 } },
	{ { 1,1 },{CHESSBOARDX+ STARTX ,CHESSBOARDY+STARTY + INTERVALY * 9 } },

	{ { 2,10 },{CHESSBOARDX+ STARTX + INTERVALX,CHESSBOARDY + STARTY } },
	{ { 2,9 },{ CHESSBOARDX + STARTX + INTERVALX ,CHESSBOARDY + STARTY + INTERVALY } },
	{ { 2,8 },{ CHESSBOARDX + STARTX + INTERVALX ,CHESSBOARDY + STARTY + INTERVALY * 2 } },
	{ { 2,7 },{ CHESSBOARDX + STARTX + INTERVALX ,CHESSBOARDY + STARTY + INTERVALY * 3 } },
	{ { 2,6 },{ CHESSBOARDX + STARTX + INTERVALX ,CHESSBOARDY + STARTY + INTERVALY * 4 } },
	{ { 2,5 },{ CHESSBOARDX + STARTX + INTERVALX ,CHESSBOARDY + STARTY + INTERVALY * 5 } },
	{ { 2,4 },{ CHESSBOARDX + STARTX + INTERVALX ,CHESSBOARDY + STARTY + INTERVALY * 6 } },
	{ { 2,3 },{ CHESSBOARDX + STARTX + INTERVALX ,CHESSBOARDY + STARTY + INTERVALY * 7 } },
	{ { 2,2 },{ CHESSBOARDX + STARTX + INTERVALX ,CHESSBOARDY + STARTY + INTERVALY * 8 } },
	{ { 2,1 },{ CHESSBOARDX + STARTX + INTERVALX ,CHESSBOARDY + STARTY + INTERVALY * 9 } },

	{ { 3,10},{ CHESSBOARDX+STARTX + INTERVALX * 2, CHESSBOARDY + STARTY } },
	{ { 3,9 },{ CHESSBOARDX + STARTX + INTERVALX * 2 ,CHESSBOARDY + STARTY + INTERVALY } },
	{ { 3,8 },{ CHESSBOARDX + STARTX + INTERVALX * 2 ,CHESSBOARDY + STARTY + INTERVALY * 2 } },
	{ { 3,7 },{ CHESSBOARDX + STARTX + INTERVALX * 2 ,CHESSBOARDY + STARTY + INTERVALY * 3 } },
	{ { 3,6 },{ CHESSBOARDX + STARTX + INTERVALX * 2 ,CHESSBOARDY + STARTY + INTERVALY * 4 } },
	{ { 3,5 },{ CHESSBOARDX + STARTX + INTERVALX * 2 ,CHESSBOARDY + STARTY + INTERVALY * 5 } },
	{ { 3,4 },{ CHESSBOARDX + STARTX + INTERVALX * 2 ,CHESSBOARDY + STARTY + INTERVALY * 6 } },
	{ { 3,3 },{ CHESSBOARDX + STARTX + INTERVALX * 2 ,CHESSBOARDY + STARTY + INTERVALY * 7 } },
	{ { 3,2 },{ CHESSBOARDX + STARTX + INTERVALX * 2 ,CHESSBOARDY + STARTY + INTERVALY * 8 } },
	{ { 3,1 },{ CHESSBOARDX + STARTX + INTERVALX * 2 ,CHESSBOARDY + STARTY + INTERVALY * 9 } },

	{ { 4,10 },{CHESSBOARDX+ STARTX + INTERVALX * 3,CHESSBOARDY + STARTY } },
	{ { 4,9 },{ CHESSBOARDX + STARTX + INTERVALX * 3, CHESSBOARDY + STARTY + INTERVALY } },
	{ { 4,8 },{ CHESSBOARDX + STARTX + INTERVALX * 3, CHESSBOARDY + STARTY + INTERVALY * 2 } },
	{ { 4,7 },{ CHESSBOARDX + STARTX + INTERVALX * 3, CHESSBOARDY + STARTY + INTERVALY * 3 } },
	{ { 4,6 },{ CHESSBOARDX + STARTX + INTERVALX * 3, CHESSBOARDY + STARTY + INTERVALY * 4 } },
	{ { 4,5 },{ CHESSBOARDX + STARTX + INTERVALX * 3, CHESSBOARDY + STARTY + INTERVALY * 5 } },
	{ { 4,4 },{ CHESSBOARDX + STARTX + INTERVALX * 3, CHESSBOARDY + STARTY + INTERVALY * 6 } },
	{ { 4,3 },{ CHESSBOARDX + STARTX + INTERVALX * 3, CHESSBOARDY + STARTY + INTERVALY * 7 } },
	{ { 4,2 },{ CHESSBOARDX + STARTX + INTERVALX * 3, CHESSBOARDY + STARTY + INTERVALY * 8 } },
	{ { 4,1 },{ CHESSBOARDX + STARTX + INTERVALX * 3, CHESSBOARDY + STARTY + INTERVALY * 9 } },

	{ { 5,10 },{CHESSBOARDX+ STARTX + INTERVALX * 4,CHESSBOARDY + STARTY } },
	{ { 5,9 },{ CHESSBOARDX + STARTX + INTERVALX * 4, CHESSBOARDY + STARTY + INTERVALY } },
	{ { 5,8 },{ CHESSBOARDX + STARTX + INTERVALX * 4, CHESSBOARDY + STARTY + INTERVALY * 2 } },
	{ { 5,7 },{ CHESSBOARDX + STARTX + INTERVALX * 4, CHESSBOARDY + STARTY + INTERVALY * 3 } },
	{ { 5,6 },{ CHESSBOARDX + STARTX + INTERVALX * 4, CHESSBOARDY + STARTY + INTERVALY * 4 } },
	{ { 5,5 },{ CHESSBOARDX + STARTX + INTERVALX * 4, CHESSBOARDY + STARTY + INTERVALY * 5 } },
	{ { 5,4 },{ CHESSBOARDX + STARTX + INTERVALX * 4, CHESSBOARDY + STARTY + INTERVALY * 6 } },
	{ { 5,3 },{ CHESSBOARDX + STARTX + INTERVALX * 4, CHESSBOARDY + STARTY + INTERVALY * 7 } },
	{ { 5,2 },{ CHESSBOARDX + STARTX + INTERVALX * 4, CHESSBOARDY + STARTY + INTERVALY * 8 } },
	{ { 5,1 },{ CHESSBOARDX + STARTX + INTERVALX * 4, CHESSBOARDY + STARTY + INTERVALY * 9 } },

	{ { 6,10 },{CHESSBOARDX+ STARTX + INTERVALX * 5,CHESSBOARDY + STARTY } },
	{ { 6,9 },{ CHESSBOARDX + STARTX + INTERVALX * 5, CHESSBOARDY + STARTY + INTERVALY } },
	{ { 6,8 },{ CHESSBOARDX + STARTX + INTERVALX * 5, CHESSBOARDY + STARTY + INTERVALY * 2 } },
	{ { 6,7 },{ CHESSBOARDX + STARTX + INTERVALX * 5, CHESSBOARDY + STARTY + INTERVALY * 3 } },
	{ { 6,6 },{ CHESSBOARDX + STARTX + INTERVALX * 5, CHESSBOARDY + STARTY + INTERVALY * 4 } },
	{ { 6,5 },{ CHESSBOARDX + STARTX + INTERVALX * 5, CHESSBOARDY + STARTY + INTERVALY * 5 } },
	{ { 6,4 },{ CHESSBOARDX + STARTX + INTERVALX * 5, CHESSBOARDY + STARTY + INTERVALY * 6 } },
	{ { 6,3 },{ CHESSBOARDX + STARTX + INTERVALX * 5, CHESSBOARDY + STARTY + INTERVALY * 7 } },
	{ { 6,2 },{ CHESSBOARDX + STARTX + INTERVALX * 5, CHESSBOARDY + STARTY + INTERVALY * 8 } },
	{ { 6,1 },{ CHESSBOARDX + STARTX + INTERVALX * 5, CHESSBOARDY + STARTY + INTERVALY * 9 } },

	{ { 7,10 },{CHESSBOARDX+ STARTX + INTERVALX * 6,CHESSBOARDY + STARTY } },
	{ { 7,9 },{ CHESSBOARDX + STARTX + INTERVALX * 6, CHESSBOARDY + STARTY + INTERVALY } },
	{ { 7,8 },{ CHESSBOARDX + STARTX + INTERVALX * 6, CHESSBOARDY + STARTY + INTERVALY * 2 } },
	{ { 7,7 },{ CHESSBOARDX + STARTX + INTERVALX * 6, CHESSBOARDY + STARTY + INTERVALY * 3 } },
	{ { 7,6 },{ CHESSBOARDX + STARTX + INTERVALX * 6, CHESSBOARDY + STARTY + INTERVALY * 4 } },
	{ { 7,5 },{ CHESSBOARDX + STARTX + INTERVALX * 6, CHESSBOARDY + STARTY + INTERVALY * 5 } },
	{ { 7,4 },{ CHESSBOARDX + STARTX + INTERVALX * 6, CHESSBOARDY + STARTY + INTERVALY * 6 } },
	{ { 7,3 },{ CHESSBOARDX + STARTX + INTERVALX * 6, CHESSBOARDY + STARTY + INTERVALY * 7 } },
	{ { 7,2 },{ CHESSBOARDX + STARTX + INTERVALX * 6, CHESSBOARDY + STARTY + INTERVALY * 8 } },
	{ { 7,1 },{ CHESSBOARDX + STARTX + INTERVALX * 6, CHESSBOARDY + STARTY + INTERVALY * 9 } },

	{ { 8,10 },{CHESSBOARDX+ STARTX + INTERVALX * 7,CHESSBOARDY + STARTY } },
	{ { 8,9 },{ CHESSBOARDX + STARTX + INTERVALX * 7, CHESSBOARDY + STARTY + INTERVALY } },
	{ { 8,8 },{ CHESSBOARDX + STARTX + INTERVALX * 7, CHESSBOARDY + STARTY + INTERVALY * 2 } },
	{ { 8,7 },{ CHESSBOARDX + STARTX + INTERVALX * 7, CHESSBOARDY + STARTY + INTERVALY * 3 } },
	{ { 8,6 },{ CHESSBOARDX + STARTX + INTERVALX * 7, CHESSBOARDY + STARTY + INTERVALY * 4 } },
	{ { 8,5 },{ CHESSBOARDX + STARTX + INTERVALX * 7, CHESSBOARDY + STARTY + INTERVALY * 5 } },
	{ { 8,4 },{ CHESSBOARDX + STARTX + INTERVALX * 7, CHESSBOARDY + STARTY + INTERVALY * 6 } },
	{ { 8,3 },{ CHESSBOARDX + STARTX + INTERVALX * 7, CHESSBOARDY + STARTY + INTERVALY * 7 } },
	{ { 8,2 },{ CHESSBOARDX + STARTX + INTERVALX * 7, CHESSBOARDY + STARTY + INTERVALY * 8 } },
	{ { 8,1 },{ CHESSBOARDX + STARTX + INTERVALX * 7, CHESSBOARDY + STARTY + INTERVALY * 9 } },

	{ { 9,10 },{CHESSBOARDX+ STARTX + INTERVALX * 8,CHESSBOARDY + STARTY } },
	{ { 9,9 },{ CHESSBOARDX + STARTX + INTERVALX * 8, CHESSBOARDY + STARTY + INTERVALY } },
	{ { 9,8 },{ CHESSBOARDX + STARTX + INTERVALX * 8, CHESSBOARDY + STARTY + INTERVALY * 2 } },
	{ { 9,7 },{ CHESSBOARDX + STARTX + INTERVALX * 8, CHESSBOARDY + STARTY + INTERVALY * 3 } },
	{ { 9,6 },{ CHESSBOARDX + STARTX + INTERVALX * 8, CHESSBOARDY + STARTY + INTERVALY * 4 } },
	{ { 9,5 },{ CHESSBOARDX + STARTX + INTERVALX * 8, CHESSBOARDY + STARTY + INTERVALY * 5 } },
	{ { 9,4 },{ CHESSBOARDX + STARTX + INTERVALX * 8, CHESSBOARDY + STARTY + INTERVALY * 6 } },
	{ { 9,3 },{ CHESSBOARDX + STARTX + INTERVALX * 8, CHESSBOARDY + STARTY + INTERVALY * 7 } },
	{ { 9,2 },{ CHESSBOARDX + STARTX + INTERVALX * 8, CHESSBOARDY + STARTY + INTERVALY * 8 } },
	{ { 9,1 },{ CHESSBOARDX + STARTX + INTERVALX * 8, CHESSBOARDY + STARTY + INTERVALY * 9 } },
};


#define RED true
#define BLACK false

#define KONG 0x00
#define MA 0x01
#define PAO 0x02
#define BING 0x03
#define CHE 0x04
#define XIANG 0x05
#define SHI 0x06
#define JIANG 0x07

#define BC_TRANSPARENT 0x10
#define BC_GRAY 0x11


struct ChessPieceStatus {
	bool alive = true; //存活
	int BC = BC_TRANSPARENT; //Lime 背景颜色
	int Name = 0x00;
	bool Color = true; // 红方还是黑方
	ChessCoordinatePosition CCP; //坐标位置
};


//翻转棋盘
void ReversalChess(map<string, ChessPieceStatus> &cs);

//根据点击的鼠标位置获取棋盘坐标
ChessCoordinatePosition GetChessPixelLocation(int x, int y);
ChessPixelLocation GetChessPixelLocationByCoordinate(ChessCoordinatePosition &ccp);

//象棋位置状态
void InitRedOpening(map<string, ChessPieceStatus> &cs);
void InitBlackOpening(map<string, ChessPieceStatus> &cs);

//所有棋子变为透明
void ChangeChessStatusTransparent(map<string, ChessPieceStatus> &cs);



